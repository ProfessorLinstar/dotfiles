#!/bin/bash

################################################################################
# Program: squidpdf
# Description: Takes a pdf file as an argument with (1x) and (5x) A4 pages, and
#              produces an output pdf file with standard A4 pages.
# Location: /usr/.local/bin/squidpdf
################################################################################

usage() { echo "Usage: $0 [-o filename] file.pdf"; }
badfile() { echo "Filename invalid or file does not exist. Input and output files must be .pdf files."; }

# Prompts a positive integer from user input. Returns 1 by default.
promptnumber() {
  while true; do
    read -p "" < /dev/tty
    [[ -z "$REPLY" ]] && return 1
    [[ "$REPLY" =~ ^([1-9][0-9]*)$ ]] && return $REPLY
    echo -n "Enter a valid positive integer. (Default 1) "
  done
}

SHORT=o:
LONG=output:
OPTS=$(getopt --options $SHORT --long $LONG --name $0 -- "$@")

if [[ $# -eq 0 ]]; then
  usage
  exit 0
fi

eval set -- "$OPTS"
while true; do
  case "$1" in
    -o | --output ) out=$2; shift 2; ;;

    -h | --help )   usage;  exit 0;  ;;
    -- )            shift;  break;   ;;
    * )             usage;  exit 1;  ;;
  esac
done

in=$1
if [[ ! -f "$in" ]] || [[ "${in##*.}" != "pdf" ]]; then
  badfile
  exit 2
fi

[[ -z "$out" ]] && out=$(basename "$in" ".pdf")" (A4).pdf"
if [[ -f "$out" ]]; then
  echo "File ${out} exists. Confirm overwrite."
  rm -vi "$out" && [[ -f "$out" ]] && exit 3
  echo
fi


one_length=842
five_length=4210
pages=()
pagenum=1

while read -r line; do
  lo=$(sed -E 's/.*b="([0-9.]+)".*/\1/' <<< $line)
  hi=$(sed -E 's/.*t="([0-9.]+)".*/\1/' <<< $line)
  length=$(bc <<< "$hi - $lo")

  pages+=( $(mktemp --suffix=".pdf") )
  mutool clean -ggggz "$in" "${pages[-1]}" $pagenum

  partnum=1
  case $length in
    $one_length ) ;;

    $five_length ) partnum=5; ;;

    * )
      echo "Page ${pagenum} has length ${length}, which does not match the one-page (${one_length}) or five-page (${five_length}) lengths."
      echo -n "Enter the desired number of partitions. (Default: 1) "

      partnum=$(promptnumber)
      echo
      ;;

  esac

  [[ $partnum -gt 1 ]] && mutool poster -y $partnum "${pages[-1]}" "${pages[-1]}"
  pagenum=$((pagenum+1))

done <<< $(mutool pages "$in" | grep -E "<MediaBox.*/>")

if [[ -z $(mutool merge -o "$out" "${pages[@]}" 2>&1) ]] ; then 
  rm "${pages[@]}"
  echo "Merge successful at $out."
else
  echo "Merge failed with ${pages[@]}"
fi

